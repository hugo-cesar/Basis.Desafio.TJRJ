// <auto-generated />
using Basis.Desafio.TJRJ.Infra.Data.Data.Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Basis.Desafio.TJRJ.Infra.Data.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Authors.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodAu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Autor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nome 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nome 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nome 3"
                        });
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodL");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Edition")
                        .HasColumnType("int")
                        .HasColumnName("Edicao");

                    b.Property<string>("PublicationYear")
                        .IsRequired()
                        .HasColumnType("varchar(4)")
                        .HasColumnName("AnoPublicacao");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Editora");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Livro", (string)null);
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.BookAuthors", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Livro_CodL");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasColumnName("Autor_CodAu");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("Livro_Autor_FKIndex2");

                    b.HasIndex("BookId")
                        .HasDatabaseName("Livro_Autor_FKIndex1");

                    b.ToTable("Livro_Autor", (string)null);
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.BookPurchaseType", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Valor");

                    b.HasKey("BookId", "PurchaseTypeId");

                    b.HasIndex("PurchaseTypeId");

                    b.ToTable("Livro_Tipo_Compra", (string)null);
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.BookSubjects", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnName("Livro_CodL");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasColumnName("Assunto_CodAs");

                    b.HasKey("BookId", "SubjectId");

                    b.HasIndex("BookId")
                        .HasDatabaseName("Livro_Assunto_FKIndex1");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("Livro_Assunto_FKIndex2");

                    b.ToTable("Livro_Assunto", (string)null);
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.PurchaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodTC");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("Tipo_Compra", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Balcão"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Self-service"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Internet"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Evento"
                        });
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Relatorios.Entities.BooksAuthorsSubjectsReport", b =>
                {
                    b.Property<string>("Book")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Livro");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Categoria");

                    b.Property<string>("YearOrAuthorOrSubject")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("AnoOuAutor");

                    b.ToTable((string)null);

                    b.ToView("vw_LivrosAutoresAssuntos", (string)null);
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Subjects.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CodAs");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Descricao");

                    b.HasKey("Id");

                    b.ToTable("Assunto", (string)null);
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.BookAuthors", b =>
                {
                    b.HasOne("Basis.Desafio.TJRJ.Domain.Features.Authors.Entities.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.BookPurchaseType", b =>
                {
                    b.HasOne("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.Book", "Book")
                        .WithMany("BookPurchaseTypes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.PurchaseType", "PurchaseType")
                        .WithMany("BookPurchaseTypes")
                        .HasForeignKey("PurchaseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("PurchaseType");
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.BookSubjects", b =>
                {
                    b.HasOne("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.Book", "Book")
                        .WithMany("BookSubjects")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basis.Desafio.TJRJ.Domain.Features.Subjects.Entities.Subject", "Subject")
                        .WithMany("BookSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Authors.Entities.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.Book", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("BookPurchaseTypes");

                    b.Navigation("BookSubjects");
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Books.Entities.PurchaseType", b =>
                {
                    b.Navigation("BookPurchaseTypes");
                });

            modelBuilder.Entity("Basis.Desafio.TJRJ.Domain.Features.Subjects.Entities.Subject", b =>
                {
                    b.Navigation("BookSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
